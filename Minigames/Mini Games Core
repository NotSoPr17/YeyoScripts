--[[
	MINI GAME SYSTEM CORE 1.0
		Limit playable Map by YeyoCore. from Youtube channel https://www.youtube.com/multiverseeditor
		If You want to support me, go to my channel and subscribe or give it a like!
	
	Description: 
		this script handles:
		--Arena Managment
		--Rules of the game
		--Inital Points
		--Permision management
		
	API:
		***MINIGAMES***
		Register Arena: 						MinigameArenaReg(GameID,"MiniGameName",x,y,z,SpawnMethod,Coinmethod) 
		Change to random minigame: 				MinigameSwitch()
		Change a specfic minigame:				MinigameSwitch(GameID,GameID)
		Change to a random minigame Range: 		MinigameSwitch(GameIDMin,GameIDMax)
		
		***CREATE GEMS***
		turn off spawn: 						MiniGameSpawnGem(0)
		Spawn Gem automatic: 					MiniGameSpawnGem()
		Spawn Gem at Random location: 			MiniGameSpawnGem(1)
		Spawn Gem arround the center: 			MiniGameSpawnGem(2)
		Spawn Gem at Borders:					MiniGameSpawnGem(3)
		Spawn Gem at specific coordinates: 	MiniGameSpawnGem(x,y,z)
]]
---------------------------------
-- SET UP
---------------------------------
--ID
MinigameItemCoin = 4123 -- Money In game
MiniGameGem = 2 -- ID of gem mob  // Id del mob gema
MiniGameGemLife = 3 -- Initial ammount of stars per life // estrellas iniciales por vida
MiniGameGemDificulty = 1.5 -- Initial ammount of stars per life // estrellas iniciales por vida

--GamePlay
MinigameRoomSize = 25 --Radius of the arena
MinigameReadyTime = 5 --seconds before each minigame starts
MinigameEliminationRound = 5 -- How many rounds the player with less gems will be killed

--Opional
MinigameBuff1 = 38 -- Avoid player to move or do anithing
MinigameSound4 = 10825
MinigameSound3 = 10770
MinigameSound2 = 10769
MinigameSound1 = 10782

MinigameVariableName =  "MiniGame" -- Name of the variable
MinigameVariableNamePlayer =  "EliminatedPlayer" -- Name of the variable
MinigameVariableNameArena =  "MinigameName" -- Name of the variable
MinigameVariableNameTarget = "MinigameTarget" -- Name of the variable
MinigameVariableNameInventory1 = "Inventory1" -- Name of the variable
MinigameVariableNameInventory2 = "Inventory2" -- Name of the variable
MinigameVariableNameInventory3 = "Inventory2" -- Name of the variable
MinigameTextName =  "Stars" -- Name Gems

------------------------------------------------------------------------------
-- /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ 
-- DO NOT MODIFY ANYTHING BELOW THIS TEXT
-- /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ 
------------------------------------------------------------------------------
--Globals
MINIGAMECORE = 1.0
MinigameGameID = -1 -- handles the current minigame
MinigameGameRounds = 0
MinigameGameRoundsKill = 0
MinigameReadyTimeBuff = MinigameReadyTime * 60
MinigameArena = {}
MinigameRoomSizeR = MinigameRoomSize * 0.5
MinigameGameRulesEliminationPlayer = ErrorCode.FAILED
MiniGameGemsSpawnActivated = false -- Auto off
MiniGameLastList = {};

--Tags
MinigameArenaCenterX = 1
MinigameArenaCenterY = 2
MinigameArenaCenterZ = 3
MinigameArenaSpawnMet = 4
MinigameArenaSpawnName = 5
MinigameArenaCoinMet = 6
VarLib2:setGlobalVarByName(VARTYPE.STRING,MinigameVariableNameArena,"#G※ Get Ready ※ ") 

--Rules 
CanJump = 50 --1-50
CanSpeed = 3 --1-10
CanCamera = 0 --0 1st, 1 = 3rd, 2 = Back, 3 = custom
CanMove = false  --true, false
CanPlanceBlock = false --true, false
CanUseBlock = false --true, false
CanDestroyBlock = false --true, false
CanCanUseItems = false --true, false
CanAttack = false --true, false
CanBeAttacked = false --true, false
CanBeKilled = false --true, false
CanPickUpItems = false --true, false
CanDropItems = false --true, false

--Rule transform player into observer (except for life)
--Rule Last One won
--Rule Compare Scores
--Rule Check Survivor
--Rule Kill Reward
--Rule last secure position

--Arena Register
function MinigameArenaReg(id,MiniGameName,x,y,z,SpawnMethod, Coinmethod)
	-- id is the number of minigame
	-- MiniGameName is the name displayed
	-- x,y,z are the center of the map coordinates
	-- Spawmethod is how players are going to spawn. 1 = random position, 2 = borders, 3 arround center 
	-- Coinmethod is how to get coins. 0 = no coins 1 = random position, 2 = borders , 3 arround center 
	MinigameArena[id] = {};
	MinigameArena[id][MinigameArenaCenterX] = x
	MinigameArena[id][MinigameArenaCenterY] = y
	MinigameArena[id][MinigameArenaCenterZ] = z
	MinigameArena[id][MinigameArenaSpawnMet] = SpawnMethod
	MinigameArena[id][MinigameArenaSpawnName] = MiniGameName
	MinigameArena[id][MinigameArenaCoinMet] = Coinmethod
	
	--msg("Arena register ")
end

function MiniGameStartMinigame(e) -- Called when game is going to start
	if e.timerid ~= MiniGameTimerStart then return end
	local result,seconds = MiniTimer:getTimerTime(e.timerid)
	if seconds > 2 then return end
	local timerid = e.timerid
	local timername = e.timername
	
	local soundShow = 0
	local textShow = "error"
	if seconds == 1 then 
		soundShow = MinigameSound4
		textShow = "※ "..MinigameArena[MinigameGameID][MinigameArenaSpawnName].." ※"
	end
	if seconds == 2 then 
		soundShow = MinigameSound3
		textShow = "#R⊗  ⓷  ⊗"
	end
	if seconds == 1 then 
		soundShow = MinigameSound2
		textShow = "#Y⊖  ⓶  ⊖"	
	end
	if seconds == 0 then 
		soundShow = MinigameSound1
		textShow = "#G⊙  Ⓖⓞ  ⊙"	
	end
	
	local result,num,players=World:getAllPlayers(-1)
	for i,a in ipairs(players) do
		local playerid = players[i]
		Player:notifyGameInfo2Self(playerid,textShow)
		SoundPlayer(playerid, soundShow) 
	end
	
	--Game Start
	if seconds ~= 0 then return end
	OutofgameON = true --Turn On limits
	local result,num,players=World:getAllPlayers(-1)
	for i,a in ipairs(players) do
		local playerid = players[i] 
		Actor:removeBuff(playerid,MinigameBuff1)--Remove Buff
		MiniGamePermisions(playerid) --Permisions for players
		
		--Music Integration
		if CustomMusic ~= nil then
			CustomMusicFolder = 1
			CustomMusicTensionLVL = CustomMusicTensionLVL + 0.02	
			if MinigameGameID == 0 then 
				CustomMusicFolder = 2
				CustomMusicTensionLVL = CustomMusicTensionLVL + 0.06		
			end
			
			CustomMusicIDRandomAll()
			--CustomMusicIDPlay(playerid,1,0,1,30)
		end
	end		
	
	--Compare Scores
	if MinigameGameID == 0 then MinigameGameRulesScoreCompare() end
	
end
ScriptSupportEvent:registerEvent([=[minitimer.change]=],MiniGameStartMinigame)

function MinigameSwitch(GMin,GMax) -- Call to change the game for any registered game
	MinigameGameRounds = MinigameGameRounds + 1
	MinigameGameRoundsKill = MinigameGameRoundsKill + 1
	
	--Set up the new game
	if GMin == nil and GMax == nil then
		if MinigameGameRoundsKill > MinigameEliminationRound then 
			--Go to elimination Room to kill less score player
			MinigameGameID = 0
			MinigameGameRoundsKill = 0
			MiniGameGemLife = math.floor(MiniGameGemLife * MiniGameGemDificulty)
			MiniGameLastList = {} -- Clear game list
			
		else --Choose random number
			MinigameGameID = Scramble(MinigameGameID,1,#MinigameArena)
		end
		
	elseif GMin == GMax then MinigameGameID = GMin --Choose a specific game
	else MinigameGameID = Scramble(MinigameGameID,GMin,GMax) end --Choose a random range game
		
	--sync Minigame with triggers
	local result = VarLib2:setGlobalVarByName(VARTYPE.NUMBER,MinigameVariableName,MinigameGameID) -- Sync with triggers
	
	--turn off limits
	MinigameGameDespawn()  -- delete previous units, mobs, coins
	local x = MinigameArena[MinigameGameID][MinigameArenaCenterX] 
	local y = MinigameArena[MinigameGameID][MinigameArenaCenterY] 
	local z = MinigameArena[MinigameGameID][MinigameArenaCenterZ]
	local Method = MinigameArena[MinigameGameID][MinigameArenaSpawnMet]	
	
	MiniGamePermisionsDefault()
	OutofgameON = false -- turn off sistem
	LIMIT_MIN_X = x - MinigameRoomSizeR -- minimun X coordinate // cordenanda menor X
	LIMIT_MAX_X = x + MinigameRoomSizeR -- maximun X coordinate // cordenanda mayor X
	LIMIT_MIN_Z = z - MinigameRoomSizeR -- minimun z coordinate // cordenanda menor Z
	LIMIT_MAX_Z = z + MinigameRoomSizeR  -- maximun z coordinate // cordenanda mayor Z
	LIMIT_MIN_Y = -2 -- minimun Y(height) coordinate // cordenanda menor Y
	LIMIT_MAX_Y = y + 35 -- maximun Y(height) coordinate // cordenanda mayor Y
	
	--TeleportPlayer
	MiniGameTeleportPlayer(Method)
	
	--AffectPlayers
	local result,num,players=World:getAllPlayers(-1)
	for i,a in ipairs(players) do
		local playerid = players[i]
		local result,pteam = Player:getTeam(playerid)
		if pteam == 1 then
			--ClearBuffs
			Actor:clearAllBuff(playerid) -- Clear all buffs
			Actor:addBuff(playerid,MinigameBuff1,1,MinigameReadyTimeBuff) --Add wait buff
			
			--Clear items
			local result, Inventory1 = VarLib2:getGlobalVarByName(VARTYPE.ITEMTYPE,MinigameVariableNameInventory1)
			local result, Inventory2 = VarLib2:getGlobalVarByName(VARTYPE.ITEMTYPE,MinigameVariableNameInventory2)
			local result, Inventory3 = VarLib2:getGlobalVarByName(VARTYPE.ITEMTYPE,MinigameVariableNameInventory3)
			Player:removeBackpackItem(playerid,Inventory1,64) 
			Player:removeBackpackItem(playerid,Inventory2,64) 
			--Player:removeBackpackItem(playerid,Inventory3,64) 
		end
				
	end
	
	-- Sync arena name with triggers
	
	local extravarname = "⊙ "..MinigameGameRounds.." │ ⊗ "..MiniGameGemLife.."★ │ "
	extravarname = extravarname.."※ "..MinigameArena[MinigameGameID][MinigameArenaSpawnName].." ※ │"
	VarLib2:setGlobalVarByName(VARTYPE.STRING,MinigameVariableNameArena,extravarname) 

	--Count Down
	MiniTimer:startBackwardTimer(MiniGameTimerStart,3,false) --GameStart
	clearScreen()
	
	--Music Integration
	if CustomMusic ~= nil then
		--Player:stopMusic(playerid)
		
		CustomMusicIDStopAll() 
	end
	
end


function MiniGameTeleportPlayer(Method)
	rside = 0
	local result,num,players=World:getAllPlayers(-1)
	--local result,num,players = Team:getTeamPlayers(1,2) -- picking all players from team red
	for i,a in ipairs(players) do
		local playerid = players[i]
		MiniGameTeleportPlayerChangeSpawn(playerid,Method)
		
	end

	return
end

function MiniGameTeleportPlayerChangeSpawn(playerid,Method)
	local x = MinigameArena[MinigameGameID][MinigameArenaCenterX] 
	local y = MinigameArena[MinigameGameID][MinigameArenaCenterY] + 1
	local z = MinigameArena[MinigameGameID][MinigameArenaCenterZ]
	local x2,y2,z2 = x,y,z;

	--Find Spawn Method
	if Method == 1 then --Random Spawn
		x2,y2,z2 =  FindSafePoint(x,y,z,MinigameRoomSizeR-3,15)
		
	elseif Method == 2 then --Find the right border 
		rside = Scramble(rside,1,4)
		if rside == 1 then --nort
			x = math.random(LIMIT_MIN_X + 3 , LIMIT_MAX_X - 3)
			z = LIMIT_MAX_Z - 3
			--z = LIMIT_MIN_Z + 3
	
		elseif rside == 2 then --west
			x = LIMIT_MAX_X - 3
			z = math.random(LIMIT_MIN_Z + 3 , LIMIT_MAX_Z - 3)

		elseif rside == 3 then --south
			x = math.random(LIMIT_MIN_X + 3 , LIMIT_MAX_X - 3)
			z = LIMIT_MIN_Z + 3

		elseif rside == 4 then --east
			x = LIMIT_MIN_X  + 3
			z = math.random(LIMIT_MIN_Z + 3 , LIMIT_MAX_Z - 3 )
	
		else 
			msg("#RBorderSpawn ERROR")
		end
		x2,y2,z2 = FindSafePoint(x,y,z,1,10)
		--World:playParticalEffect(x2,y2,z2,1290,2)
		
	
		
	elseif Method == 3 then --Center Spawn
		x2,y2,z2 =  FindSafePoint(x,y,z,4,10)
	
	else
		msg("#RSpawnError")		
	end
	
	--Observers
	y2 = MinigameArena[MinigameGameID][MinigameArenaCenterY] + 1
	local result,pteam = Player:getTeam(playerid)
	if pteam == 2 then
		local prey = LIMIT_MAX_Y - LIMIT_MIN_Y
		y2 = LIMIT_MIN_Y + (prey / 2) 
	end
	
	--Teleport Player
	Player:setPosition(playerid,x2,y2,z2)
	Actor:setPosition(playerid,x2,y2,z2)
	Player:setRevivePoint(playerid,x2,y2,z2)
	Player:reviveToPos(playerid,x2,y2,z2) -- revive
	 
end


function MiniGameSpawnGem(val1,val2,val3)
	local Method = 1
	if val2 ~= nil and val3 ~= nil then 
		Method = 4 -- specific location
	elseif val1 == nil then 
		Method = MinigameArena[MinigameGameID][MinigameArenaCoinMet] -- AutoMode
	else
		Method = val1 -- normal modes
	end 
	
	--msg("Method "..Method)
	if MiniGameGemsSpawnActivated == false and Method ~= 0 then MiniGameGemsSpawnActivated = true end --AutoActivation
	if MiniGameGemsSpawnActivated == false then return end --Safe EXIT
	
	local rside = 1
	local rx = 0
	local rz = 0
	local x = MinigameArena[MinigameGameID][MinigameArenaCenterX] 
	local y = MinigameArena[MinigameGameID][MinigameArenaCenterY] + 1
	local z = MinigameArena[MinigameGameID][MinigameArenaCenterZ]
	local x2,y2,z2 = x,y,z;
	
	--msg("pre - Method "..Method) 
	if Method == 0 then --Off
		MiniGameGemsSpawnActivated = false
	elseif Method == 1 then --Random Spawn
		x2,y2,z2 =  FindSafePoint(x,y,z,MinigameRoomSizeR-3,15)
		
	elseif Method == 2 then --Find the right border 
		local rside = Scramble(rside,1,4)
		if rside == 1 then --nort
			x = math.random(LIMIT_MIN_X + 2 , LIMIT_MAX_X - 2)
			z = LIMIT_MAX_Z - 2

		elseif rside == 2 then --west
			x = LIMIT_MAX_X - 2
			z = math.random(LIMIT_MIN_Z + 2 , LIMIT_MAX_Z - 2)
			
		elseif rside == 3 then --south
			x = math.random(LIMIT_MIN_X + 2 , LIMIT_MAX_X - 2)
			z = LIMIT_MIN_Z + 2
			
		else --east
			x = LIMIT_MIN_X  + 2
			z = math.random(LIMIT_MIN_Z + 2 , LIMIT_MAX_Z - 2 )
		end
		x2,y2,z2 =  FindSafePoint(x,y,z,1,10)
		
	elseif Method == 3 then --Center Spawn
		x2,y2,z2 =  FindSafePoint(x,y,z,4,10)
		
	elseif Method == 4 then --Specific Coordnedades
		x2 = val1
		y2 = val2
		z2 = val3
	else
		--msg("#RCSpawnError")		
	end
	
	--SpawnCoins
	y2 = MinigameArena[MinigameGameID][MinigameArenaCenterY] + 1
	local result,objids=World:spawnCreature(x2,y2,z2,MiniGameGem,1)
end


function MiniGamePermisions(playerid)
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_MOVE,CanMove)
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_PLACEBLOCK,CanPlanceBlock )
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_OPERATEBLOCK,CanUseBlock )
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_DESTROYBLOCK,CanDestroyBlock )
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_USEITEM,CanCanUseItems )
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_ATTACK,CanAttack )
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_BEATTACKED,CanBeAttacked )
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_BEKILLED,CanBeKilled )
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_PICKUP,CanPickUpItems )
	Player:setActionAttrState(playerid,PLAYERATTR.ENABLE_DISCARDITEM,CanDropItems )
	Player:setAttr(playerid,PLAYERATTR.JUMP_POWER,CanJump )
	Player:setAttr(playerid,PLAYERATTR.SNEAK_SPEED,CanSpeed * 0.5 )
	Player:setAttr(playerid,PLAYERATTR.WALK_SPEED,CanSpeed  )
	Player:setAttr(playerid,PLAYERATTR.RUN_SPEED,CanSpeed * 1.5)
	Player:changeViewMode(playerid,CanCamera ,true)
end 

function MiniGamePermisionsDefault()
	CanJump = 50 --1-100
	CanSpeed = 10 --1-10
	CanCamera = 0 --0 1st, 1 = 3rd, 2 = Back, 3 = custom
	CanMove = true  --true, false
	CanPlanceBlock = false --true, false
	CanUseBlock = false --true, false
	CanDestroyBlock = false --true, false
	CanCanUseItems = false --true, false
	CanAttack = false --true, false
	CanBeAttacked = false --true, false
	CanBeKilled = false --true, false
	CanPickUpItems = false --true, false
	CanDropItems = false --true, false
	local result,num,players=World:getAllPlayers(-1)
	for i,a in ipairs(players) do
		local playerid = players[i]
		MiniGamePermisions(playerid) --Permisions for players
	end	
end

function MiniGameTimerIni() -- creates ini timer
	ret, MiniGameTimerStart = MiniTimer:createTimer("MiniGameStart",nil,false)
end 
ScriptSupportEvent:registerEvent([=[Game.Start]=],MiniGameTimerIni)

Scramble22222 = function(OldValue,Number1,Number2) 
    local NewValue = math.random(Number1,Number2)
    if NewValue == OldValue then NewValue = NewValue + 1 end
	if NewValue > Number2 then NewValue = Number1 end
	return NewValue
end

Scramble = function(OldValue,Number1,Number2) 
	local NewValue = math.random(Number1,Number2)
	for i=1, #MinigameArena do
		if NewValue == MiniGameLastList[i] then 
			NewValue = NewValue + 1
			if NewValue > Number2 then NewValue = Number1 end
		else 
			break;
		end
	end
	
	--Ading value to list 
	table.insert(MiniGameLastList, NewValue)
	
	return NewValue
end


Sound = function(x2,y2,z2,sound) -- simple sound
    local pitch = 1 + (math.random(-2,2)/10)
    local volume = 80 + math.random(40)
    World:playSoundEffectOnPos({x=x2,y=y2,z=z2},sound,volume ,pitch,false)
end

soundall = function(sound) -- Pay son on all players at same time
	local reta,num,players = World:getAllPlayers(-1)
	for id = 1, #players  do --add tips to all players
		local playerid = players[id]
		local result,x,y,z = Player:getPosition(playerid)
		Sound(x,y,z,sound)
	end
end

SoundPlayer = function(playerid,sound) -- simple sound on player
	local result,x,y,z = Actor:getPosition(playerid)
	Sound(x,y,z,sound) 
end

function FindSafePoint(x,y,z,radius,trytimes)
	local x2 = x
	local y2 = y + 1
	local z2 = z
	local radiusNegative = radius * -1
	local succes = false 
	
	for i=1, trytimes do	
		x2 = x + math.random(radiusNegative,radius)
		z2 = z + math.random(radiusNegative,radius)
		local result,blockid = World:getRayBlock(x2,LIMIT_MAX_Y,z2,4,LIMIT_MAX_Y-1) -- 0 Oeste 1 Este 2 Sur 3 Norte 4 Abajo 5 Arriba
		if blockid ~= -1 then
			succes = true
			break;
		end
	end
	
	return x2,y2,z2
end

function MinigameGameRulesScoreCompare()
	local LesserScore = 10000000
	local LesserPlayer = ErrorCode.FAILED
	local result,num,players=World:getAllPlayers(-1)
	for i,a in ipairs(players) do
		local playerid = players[i]
		local result,pteam = Player:getTeam(playerid)
		
		if pteam ~= 2 then
			--Transform Gems into Score
			--local result,FullTempScore = Player:getAttr(playerid,PLAYERATTR.SCORE)
			local result,FullTempScore = Player:getAttr(playerid,PLAYERATTR.LEVEL)
			local Pcolor = getTeamColor(playerid)
			local result,NickNameP = Player:getNickname(playerid)
			Chat:sendSystemMsg(Pcolor..NickNameP.."#n "..MinigameTextName..": #b"..FullTempScore,0)
			
			--Compare score
			if FullTempScore < LesserScore then  -- player is lesser
				LesserScore = FullTempScore
				LesserPlayer = playerid
				
			elseif FullTempScore == LesserScore then  --draw
				if math.random(0,100) <= 49 then 
					LesserScore = FullTempScore
					LesserPlayer = playerid
				end
			end
			
			--Transform gems into coins
			--Player:setAttr(playerid,PLAYERATTR.SCORE,0)
			Player:setAttr(playerid,PLAYERATTR.LEVEL,0)
			Player:gainItems(playerid, MinigameItemCoin,FullTempScore, 1)
			Player:notifyGameInfo2Self(playerid,"#G+"..FullTempScore.." Coins")
			
		end
	end
	
	--Set the eliminated player
	MinigameGameRulesEliminationPlayer = LesserPlayer
	
	--sync with triggers
	if MinigameGameRulesEnterdPlayers == nil then return end
	--Single Player Mode
	if MinigameGameRulesEnterdPlayers <= 1 then 
		if LesserScore <= MiniGameGemLife then 
			local result = VarLib2:setGlobalVarByName(VARTYPE.PLAYER,MinigameVariableNamePlayer,MinigameGameRulesEliminationPlayer) -- Sync with triggers
		end
		return 
	end
	
	--Multiplayer Mode
	local result = VarLib2:setGlobalVarByName(VARTYPE.PLAYER,MinigameVariableNamePlayer,MinigameGameRulesEliminationPlayer) -- Sync with triggers
	
end


getTeamColor = function(playerid) -- Get target player color by team
	local RET, team = Player:getTeam(playerid)
	local color = '#W'
	if team == 1 then color = '#R' end -- red
	if team == 2 then color = '#B' end --blue
	if team == 3 then color = '#G' end -- green
	if team == 4 then color = '#Y' end -- yellow
	if team == 5 then color = '#cE67E11' end -- Organge
	if team == 6 then color = '#cA055BE' end -- Purple
	
	return color
end


function clearScreen()
	Chat:sendSystemMsg("                       ",playerid)
	Chat:sendSystemMsg("                       ",playerid)
	Chat:sendSystemMsg("                       ",playerid)
	Chat:sendSystemMsg("                       ",playerid)
	Chat:sendSystemMsg("                       ",playerid)
	Chat:sendSystemMsg("                       ",playerid)
	Chat:sendSystemMsg("                       ",playerid)
	Chat:sendSystemMsg("                       ",playerid)
	Chat:sendSystemMsg("                       ",playerid)
	return ErrorCode.OK 
	
end
	
function MinigameGameDespawn()
	local result,num,Creatures = World:getActorsByBox(2,LIMIT_MIN_X,LIMIT_MIN_Y,LIMIT_MIN_Z,LIMIT_MAX_X,LIMIT_MAX_Y,LIMIT_MAX_Z)
	for i,a in ipairs(Creatures) do
		local target = Creatures[i]
		World:despawnCreature(target)
	end
	return ErrorCode.OK
end

function AutoTarget(Time)
	--clean previous
	local result,target = VarLib2:getGlobalVarByName(VARTYPE.PLAYER,MinigameVariableNameTarget)
	Player:removeBuff(target,102)
	
	--Set New
	local result,target = Team:randomTeamPlayer(1,1)
	Player:addBuff(target,102,1,Time) -- addbuff
	VarLib2:setGlobalVarByName(VARTYPE.PLAYER,MinigameVariableNameTarget,target)
end
